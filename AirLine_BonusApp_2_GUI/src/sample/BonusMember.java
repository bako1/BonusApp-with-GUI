package sample;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

/**
* The BonusMember-class holds  information like memberNumber,personalInfo,and enrolledDate
* like: surname, lastnam, e-mail address and password.
* The class is the Basic class for
*
* */
public class BonusMember {
    private final int memberNo;
    private final Personals personals;
    private final LocalDate enrolledDate;
    private int bonusPoints;
    static final float FACTOR_SILVER=1.2F;
    static final float FACTOR_GOLD=1.5F;

/**
 * @param memberNo memberNo a unique number of a user generated by Random class
 * @param personals personal information of a user, like name, e-mail address
 * @param enrolledDate the date that user enrolled
 * bonusPoints earned points
 * */

    public BonusMember(int memberNo,Personals personals,LocalDate enrolledDate) {

            this.memberNo = memberNo;
            this.personals=personals;
            this.enrolledDate=enrolledDate;
            this.bonusPoints=0;



    }

    public BonusMember(int memberNo,Personals personals,LocalDate enrolledDate, int bonusPoints) {
        this.memberNo = memberNo;
        this.personals=personals;
        this.enrolledDate=enrolledDate;
        this.bonusPoints=bonusPoints;

    }


/**
 * @return memberNo return the member number of a user
 *
 * */

    public int getMemberNo() {
        return memberNo;
    }
/**
 * @return personals returns the personals
 * */
    public Personals getPersonals() {
        return personals;
    }

    /**
     * @return enrolledDte returnsEnrolled date in the form fo yyyy-mm-dd
     *
     *
      */
    public LocalDate getEnrolledDate() {
        return enrolledDate;
    }
/**
 * @return returns bonusPoints
 *
 * */
    public int getBonusPoints() {
        return bonusPoints;
    }

    /**
     * @param enrolledDate date user enrolled
     * daysBetween days between enrolledDay and qualification checking day
     * @return returns bonusPoints if daysBetween is between zero and 365 excluding end points
     * return 0 otherwise
     * */
   public int findQualificationPoints(LocalDate enrolledDate){
       long daysBetween = ChronoUnit.DAYS.between(this.enrolledDate,enrolledDate);

       if(daysBetween<=365 && daysBetween>=0){

           return this.bonusPoints;

       }else
           return 0;
   }
/**
 * @param password user password
 * @return return true if password exist false otherwise
 * */
   public boolean okPassword(String password){
        if(personals.okPassword(password))
            return true;
        else
            return false;
   }
/**
 * @param bonusPoints bonus points to register
 * adds newly earned point to the earlier bonusPoints if any
 * */
   public void registerPoints(int bonusPoints){

        this.bonusPoints+=bonusPoints;


    }


    public String toString() {
        return getPersonals().getFirstName()+"\t"
                +getPersonals().getSurname()+"\t"
                +getMemberNo()+"\t"
                +getEnrolledDate()+"\t"
                +getBonusPoints()+"\n\n";

    }

}
